<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lvl = 1;
turn = 1;
day = 1;
hpnum = 1;
checker = 1;
animate = 1;
aispd = 1;
selected = -1;
gold1 = 20;
gold2 = 20;
shoppick = -1;
daycount = 1;
tick = 0;
unitgrid = ds_grid_create(16,16);
groundgrid = ds_grid_create(16,16);

ai = 0;
ally = ds_list_create();
location = ds_list_create();
textlist = ds_list_create();
winlist = ds_list_create();
loselist = ds_list_create();
nextunit = 0;
unit1 = 0;
unit2 = 0;
maptext = "";

tempstate = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RESET
turn = 1;
day = 1;
selected = -1;
gold1 = 20;
gold2 = 20;
shoppick = -1;
daycount = 1;
tick = 0;
nextunit = 0;
unit1 = 0;
unit2 = 0;
maptext = "";
tempstate = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AI
//find targets for the next allied unit
u = ds_list_find_value(ally,nextunit);
if instance_exists(u){
//find closest unit

dist = 9999;
target = -1;
enemynex = -1;
numland = 0;
with obj_tile{
    /*if type = 1 &amp;&amp; side = 1{
        other.enemynex = id;
        if distance_to_object(other.u)-32*attack_range(other.u.type) &lt; other.dist{
            other.dist = distance_to_object(other.u)-32*attack_range(other.u.type);
            other.target = id;
        }
    }*/
    if (type = 6 || type = 13) &amp;&amp; side = 1{
        other.enemynex = id;
        if distance_to_object(other.u)-32*1.5 &lt; other.dist{
            other.dist = distance_to_object(other.u)-32*1.5;
            other.target = id;
        }
    }
    if water = 0 other.numland++;
    if distance_to_object(other.u) &lt; other.dist &amp;&amp; side = 1{
        other.dist = distance_to_object(other.u);
        other.target = id;
    }
    if side = 0 &amp;&amp; other.u.captureable != 1{//capturing is priority
        if distance_to_object(other.u)-32*3 &lt; other.dist{
            other.dist = distance_to_object(other.u)-32*3;
            other.target = id;
        }
    }
}
//move towards unit
    if !(abs(u.x-target.x)+abs(u.y-target.y) &gt; 3*32 &amp;&amp; abs(u.x-target.x)+abs(u.y-target.y) &lt; 5*32 &amp;&amp; u.type = 6 &amp;&amp; target.side != 0){
        ai_move(u.x,u.y,get_spd(u.type)*6,u);
        while u.done = 0{
            dist = 9999;
            targe = -1;
            for(i = 0; i &lt; ds_list_size(location); i++){
                n = ds_list_find_value(location,i);
                if abs(abs(getc(n.x)-getc(target.x))+abs(getc(n.y)-getc(target.y))-attack_range(u.type)) &lt; dist{
                    dist = abs(abs(getc(n.x)-getc(target.x))+abs(getc(n.y)-getc(target.y))-attack_range(u.type));
                    targe = n.id;
                }
            }
            if targe != -1{
                state = 0;
                if (u.water = 1 &amp;&amp; (targe.type != 1 &amp;&amp; targe.type != 4)) state = -1;
                with obj_tile{
                    if (x = other.targe.x &amp;&amp; y = other.targe.y) &amp;&amp; id != other.u other.state = -1;
                }
                if state = 0{
                    u.done = 1;
                    if u.type = 6 || u.type = 13 u.done = 2;
                    if u.x = targe.x &amp;&amp; u.y = targe.y u.done = 1;
                    ds_grid_set(unitgrid,getc(u.x),getc(u.y),0);
                    u.x = targe.x;
                    u.y = targe.y;
                    ds_grid_set(obj_control.unitgrid,getc(u.x),getc(u.y),u);
                    
                }
                else
                {
                    ds_list_delete(location,ds_list_find_index(location,targe));
                }
            }
            else u.done = 1;
        }
    }
//generate units if factory/harbor
//check if there's a factory/harbor closer to the enemy nexus
dist = 9999;
i = -1;
with obj_tile{
    if (type = 8 || type = 14) &amp;&amp; side = -1 &amp;&amp; distance_to_object(other.enemynex)&lt;other.dist{
        if type = 8 other.dist = distance_to_object(other.enemynex)+other.numland; //priority for harbors
        else other.dist = distance_to_object(other.enemynex);
        other.i = id;
    }
}
if gold2 &gt; 40 i = u;
if u.type = 8 &amp;&amp; i = u{
    n[0,0] = -32; n[1,0] = 0;
    n[0,1] = 0; n[1,1] = 32;
    n[0,2] = 32; n[1,2] = 0;
    n[0,3] = 0; n[1,3] = -32;
    for(j=0; j&lt;4; j++){
        ID = -1;
        p = -1;
        with obj_tile{
            if x-other.u.x = other.n[0,other.j] &amp;&amp; y-other.u.y = other.n[1,other.j]{
                other.p = id;
            }
        }
        rk = -1;
        with obj_ground{
            if x-other.u.x = other.n[0,other.j] &amp;&amp; y-other.u.y = other.n[1,other.j]{
                if type != -1
                other.rk = id;
            }
        }
        if p = -1 &amp;&amp; rk != -1{
            if gold2 &gt;= 30 &amp;&amp; irandom(2) &lt; 1{
                ID = instance_create(u.x+n[0,j],u.y+n[1,j],obj_tile);
                ID.type = 6;
                ID.side = -1;
                get_stats(ID);
                ID.done = 2;
                u.done = 2;
                gold2 -= 30;
                ds_grid_set(obj_control.unitgrid,getc(u.x+n[0,j]),getc(u.y+n[1,j]),ID);
                break;
            }
            if gold2 &gt;= 20 &amp;&amp; irandom(2) &lt; 2{
                ID = instance_create(u.x+n[0,j],u.y+n[1,j],obj_tile);
                ID.type = 7;
                ID.side = -1;
                get_stats(ID);
                ID.done = 2;
                u.done = 2;
                gold2 -= 20;
                ds_grid_set(obj_control.unitgrid,getc(u.x+n[0,j]),getc(u.y+n[1,j]),ID);
                break;
            }
            if gold2 &gt;= 10 &amp;&amp; irandom(3) &lt; 2{
                ID = instance_create(u.x+n[0,j],u.y+n[1,j],obj_tile);
                ID.type = irandom_range(2,4);
                ID.side = -1;
                get_stats(ID);
                ID.done = 2;
                u.done = 2;
                gold2 -= 10;
                ds_grid_set(obj_control.unitgrid,getc(u.x+n[0,j]),getc(u.y+n[1,j]),ID);
                break;
            }
            if gold2 &gt;= 5{
                ID = instance_create(u.x+n[0,j],u.y+n[1,j],obj_tile);
                ID.type = 5;
                ID.side = -1;
                get_stats(ID);
                ID.done = 2;
                u.done = 2;
                gold2 -= 5;
                ds_grid_set(obj_control.unitgrid,getc(u.x+n[0,j]),getc(u.y+n[1,j]),ID);
                break;
            }
        }
    }
}
if u.type = 14&amp;&amp; i = u{
    n[0,0] = -32; n[1,0] = 0;
    n[0,1] = 0; n[1,1] = 32;
    n[0,2] = 32; n[1,2] = 0;
    n[0,3] = 0; n[1,3] = -32;
    for(j=0;j&lt;4;j++){
        p = -1;
        ID = -1;
        with obj_tile{
            if x-other.u.x = other.n[0,other.j] &amp;&amp; y-other.u.y = other.n[1,other.j]{
                other.p = id;
            }
        }
        rk = -1;
        with obj_ground{
            if x-other.u.x = other.n[0,other.j] &amp;&amp; y-other.u.y = other.n[1,other.j]{
                if !(type = 1 || type = 4)
                other.p = id;
                if type != -1 other.rk = id;
            }
        }
        if p = -1 &amp;&amp; rk != -1{
            if gold2 &gt;= 35 &amp;&amp; irandom(2) &lt; 1{
                ID = instance_create(u.x+n[0,j],u.y+n[1,j],obj_tile);
                ID.type = 13;
                ID.side = -1;
                get_stats(ID);
                ID.done = 2;
                u.done = 2;
                gold2 -= 35;
                ds_grid_set(obj_control.unitgrid,getc(u.x+n[0,j]),getc(u.y+n[1,j]),ID);
                break;
            }
            if gold2 &gt;= 25 &amp;&amp; irandom(2) &lt; 2{
                ID = instance_create(u.x+n[0,j],u.y+n[1,j],obj_tile);
                ID.type = 17;
                ID.side = -1;
                get_stats(ID);
                ID.done = 2;
                u.done = 2;
                gold2 -= 25;
                ds_grid_set(obj_control.unitgrid,getc(u.x+n[0,j]),getc(u.y+n[1,j]),ID);
                break;
            }
            if gold2 &gt;= 20{
                ID = instance_create(u.x+n[0,j],u.y+n[1,j],obj_tile);
                ID.type = 12;
                ID.side = -1;
                get_stats(ID);
                ID.done = 2;
                u.done = 2;
                gold2 -= 20;
                ds_grid_set(obj_control.unitgrid,getc(u.x+n[0,j]),getc(u.y+n[1,j]),ID);
                break;
            }
            if ID != -1 obj_control.unitgrid[getc(ID.x),getc(ID.y)] = ID;
        }
    }
}
if u.type = 21&amp;&amp; i = u{
    n[0,0] = -32; n[1,0] = 0;
    n[0,1] = 0; n[1,1] = 32;
    n[0,2] = 32; n[1,2] = 0;
    n[0,3] = 0; n[1,3] = -32;
    for(j=0;j&lt;4;j++){
        p = -1;
        ID = -1;
        with obj_tile{
            if x-other.u.x = other.n[0,other.j] &amp;&amp; y-other.u.y = other.n[1,other.j]{
                other.p = id;
            }
        }
        rk = -1;
        with obj_ground{
            if x-other.u.x = other.n[0,other.j] &amp;&amp; y-other.u.y = other.n[1,other.j]{
                if !(type = 1 || type = 4)
                other.p = id;
                if type != -1 other.rk = id;
            }
        }
        if p = -1 &amp;&amp; rk != -1{
            if gold2 &gt;= 35 &amp;&amp; irandom(2) &lt; 1{
                ID = instance_create(u.x+n[0,j],u.y+n[1,j],obj_tile);
                ID.type = 19;
                ID.side = -1;
                get_stats(ID);
                ID.done = 2;
                u.done = 2;
                gold2 -= 35;
                ds_grid_set(obj_control.unitgrid,getc(u.x+n[0,j]),getc(u.y+n[1,j]),ID);
                break;
            }
            if gold2 &gt;= 20 &amp;&amp; irandom(2) &lt; 2{
                ID = instance_create(u.x+n[0,j],u.y+n[1,j],obj_tile);
                ID.type = 20;
                ID.side = -1;
                get_stats(ID);
                ID.done = 2;
                u.done = 2;
                gold2 -= 20;
                ds_grid_set(obj_control.unitgrid,getc(u.x+n[0,j]),getc(u.y+n[1,j]),ID);
                break;
            }
            if gold2 &gt;= 30{
                ID = instance_create(u.x+n[0,j],u.y+n[1,j],obj_tile);
                ID.type = 18;
                ID.side = -1;
                get_stats(ID);
                ID.done = 2;
                u.done = 2;
                gold2 -= 25;
                ds_grid_set(obj_control.unitgrid,getc(u.x+n[0,j]),getc(u.y+n[1,j]),ID);
                break;
            }
            if ID != -1 obj_control.unitgrid[getc(ID.x),getc(ID.y)] = ID;
        }
    }
}
if instance_exists(u){
    //fire at unit or advance counter
    if u.done &lt;= 1 &amp;&amp; target.side != 0 {
        ai_attack(u);
        r = -1;
        for(n=0; n&lt;ds_list_size(location); n++){
            if ds_list_find_value(location,n).x = target.x &amp;&amp; ds_list_find_value(location,n).y = target.y{
                r = ds_list_find_value(location,n);
            }
        }
            if r != -1{
                attack(u.id,target);
                if obj_control.animate = -1{
                    if abs(getc(target.x)-getc(u.x))+abs(getc(target.y)-getc(u.y)) &lt;= attack_range(target.type) {
                        if target.type != 3 || abs(getc(target.x)-getc(u.x))+abs(getc(target.y)-getc(u.y)) &gt; 1{
                            if target.type != 6 &amp;&amp; target.type != 11 &amp;&amp; target.type != 13 &amp;&amp; target.type != 17{
                                if !(target.melee = 1 &amp;&amp; u.id.flying = 1)
                                    attack(target,u.id);
                            }
                        }
                    }
                }
                u.done = 2;
            }
    }
}
}
//temporary advance
if nextunit = ds_list_size(ally)-1{
    day++;
    if daycount = 1 instance_create(0,0,obj_daycount);
    turn = -turn;
    shoppick = -1;
    unit1 = 0;
    unit2 = 0;
    with obj_tile {
        prevdone = done; 
        if side = -1 other.unit2++;
        if side = 1 other.unit1++;
        if (type = 1 || captureable = 1) &amp;&amp; side = -other.turn {hp += 1; IDO = instance_create(x,y,obj_effect); IDO.type = 1; IDO.value = 1;}
        if (type = 9 || type = 15 || type = 20) &amp;&amp; side != other.turn alarm[7] = 1;
        if captureable = 1 &amp;&amp; side = 0 {newsway = 0; alarm[8] = 1;}
        if type = 10 || type = 1{
            if other.turn = 1 &amp;&amp; other.turn = side other.gold1 += 5;
            if other.turn = -1 &amp;&amp; other.turn = side other.gold2 += 5;
            if side != other.turn alarm[4] = 1;
        }
        done = 0;
    }
   /* with obj_tile{
        if other.unit1 = 1 &amp;&amp; type = 1 &amp;&amp; side = 1 other.unit1 = 0;
        if other.unit2 = 1 &amp;&amp; type = 1 &amp;&amp; side = -1 other.unit2 = 0;
    }*/
    if unit1 = 0{
        IDS = instance_create(32,32,obj_maptext);
        IDS.type = 2;
        turn = 0;
    }
    if unit2 = 0{
        IDS = instance_create(32,32,obj_maptext);
        IDS.type = 1;
        turn = 0;
    }
    with obj_ground{
        state = -1;
    }
    obj_control.selected = -1;
    with obj_shop instance_destroy();
    nextunit = 0;
}
else
{
    nextunit++;
    alarm[5] = 61-(aispd-1)*30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if !(ai = 1 &amp;&amp; turn = -1) &amp;&amp; !instance_exists(obj_maptext){turn = -turn;
if turn = 1 day++;
shoppick = -1;
unit1 = 0;
unit2 = 0;
if daycount = 1 instance_create(0,0,obj_daycount);
with obj_tile {
    prevdone = done;
    if side = -1 other.unit2++;
    if side = 1 other.unit1++;
    if (type = 1 || captureable = 1) &amp;&amp; side = -other.turn {hp += 1; IDO = instance_create(x,y,obj_effect); IDO.type = 1; IDO.value = 1;}
    if (type = 9 || type = 15 || type = 20) &amp;&amp; side != other.turn alarm[7] = 1;
    if captureable = 1 &amp;&amp; side = 0 {newsway = 0; alarm[8] = 1;}
    if type = 10 || type = 1{
        if other.turn = 1 &amp;&amp; other.turn = side other.gold1 += 5;
        if other.turn = -1 &amp;&amp; other.turn = side other.gold2 += 5;
        if side != other.turn alarm[4] = 1;
    }
    done = 0;
}
/*with obj_tile{
    if other.unit1 = 1 &amp;&amp; type = 1 &amp;&amp; side = 1 other.unit1 = 0;
    if other.unit2 = 1 &amp;&amp; type = 1 &amp;&amp; side = -1 other.unit2 = 0;
}*/
if unit1 = 0{
    IDS = instance_create(32,32,obj_maptext);
    IDS.type = 2;
    turn = 0;
}
if unit2 = 0{
    IDS = instance_create(32,32,obj_maptext);
    IDS.type = 1;
    turn = 0;
}
with obj_ground{
    state = -1;
}
obj_control.selected = -1;
with obj_shop instance_destroy();
if turn = -1 &amp;&amp; ai = 1{
    //create list of allied units
    ds_list_clear(ally);
    
    with obj_tile{
        if side = -1 ds_list_add(other.ally,id);
    }
    if obj_control.daycount = 1 alarm[5] = 50; else alarm[5] = 1;
    
}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tick++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(obj_maptext) &amp;&amp; mouse_x &gt; 32*12 &amp;&amp; mouse_x &lt; 32*12+96 &amp;&amp; mouse_y &gt; 8 &amp;&amp; mouse_y &lt; 24{
    alarm[2] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(spr_indicator,10,576,32);
draw_sprite(spr_indicator,11,576+32,32);
draw_sprite(spr_indicator,11,576+32*2,32);
draw_sprite(spr_indicator,12,576+32*3,32);
draw_sprite(spr_indicator,13,576+32*4,32);
draw_sprite(spr_indicator,13,576+32*5,32);
draw_sprite(spr_indicator,14,576+32*6,32);
if turn = 1 draw_sprite_ext(spr_indicator,15,576+32,32+32,1,1,180,c_white,1);
if turn = -1 draw_sprite(spr_indicator,15,576+32*6,32);

draw_set_halign(fa_right);
border_text(576+32*3,32,string(gold1));
draw_set_halign(fa_left);
border_text(576+32*4,32,string(gold2));
draw_set_color(c_white);
draw_rectangle(16+12*cos(pi*tick*7.2/180)-1,16+12*sin(pi*tick*7.2/180)-1,16+12*cos(pi*tick*7.2/180)+1,16+12*sin(pi*tick*7.2/180)+1,false);
draw_set_font(ft_small);
draw_set_halign(fa_center);
draw_text(16,8,fps);
if animate = -1 draw_text(128,8,"Animation off!");
if ai = 1 {draw_text(228,8,"AI Mode");
draw_text(320,8,"AI Speed: "+string(aispd));}
draw_set_halign(fa_left);
draw_text_ext(34,32,maptext,12,32*16-4);
if daycount = 0 draw_text(480,8,"Day "+string(day));
draw_text(64,552,"F1 for controls.");
if !instance_exists(obj_maptext){
    draw_set_color(c_maroon);
    draw_rectangle(32*12,8,32*12+96,24,false);
    draw_set_color(c_white);
    draw_rectangle(32*12,8,32*12+96,24,true);
    draw_set_halign(fa_center);
    draw_text(32*12+48,8,"End Turn");
    draw_set_halign(fa_left);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_get_fullscreen()
window_set_fullscreen(false);
else
window_set_fullscreen(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="112">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_message("HELP:#
[SPACE] to end the turn.#
[ESC] to exit to menu.#
[R] to restart the level info/text.#
[D] to toggle fancy day indicators.#
[S] to toggle AI speed.#
[A] to toggle Animated battle sequences.#
[H] to toggle HP indicators.
");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ai = 1{
    if aispd &gt; 2{
        aispd = 1;
    }
    else aispd++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with obj_maptext instance_destroy();

get_maptext(obj_text.map);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ai = 1 ai = 0; else ai = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d = get_string("Load map: Input exact file name.#(This will restart the game!)","map.txt");
if file_exists(d){
    with obj_tile instance_destroy();
    with obj_ground instance_destroy();
    gold1 = 20;
    gold2 = 20;
    turn = 1;
    get_map(d);
}
else{
    show_message("File not found.");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hpnum = -hpnum;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if daycount = 0 daycount = 1; else daycount = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="67">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//checker = -checker;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(obj_bullet)
animate = -animate;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if show_question("Back to Level Select?") game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
