<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tile2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>type = 0;
hp = 100;
maxhp = 100;
atk = 6;
done = 0;
side = 1;
store = -1;
sway = 0;
newsway = 0;
scalingatk = 1;
water = 0;
living = 0;
missiles = 0;
captureable = 0;
prevdone = 0;
flying = 0;
melee = 0;
indirect = 0;
value = 0;
action = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>counter1 = 0;
counter2 = 0;
ii = 0;
with obj_tile{
    if abs(getc(other.x)-getc(x))+abs(getc(other.y)-getc(y)) &lt;= 1 &amp;&amp; prevdone &lt;=1 &amp;&amp;side != other.side &amp;&amp; side = -obj_control.turn &amp;&amp; !(type = 1 || type = 8||type = 10 || type = 11 || type = 14){
        if side = 1 other.counter1++;
        if side = -1 other.counter2++;
        other.ii = 1;
    }
}
//if ii = 0 &amp;&amp; sign(obj_control.turn) != sign(sway) sway = 0;
newsway = counter1-counter2;
sway+= newsway;
if abs(sway) &gt; 2{
side = sign(sway);
hp = 15;
sway = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with obj_tile{
    if abs(getc(other.x)-getc(x))+abs(getc(other.y)-getc(y)) &lt;= 1 &amp;&amp; side = other.side &amp;&amp; type != 8 &amp;&amp; type != 10 &amp;&amp; type != 1 &amp;&amp; type != 14 {
        hp += 2;
        IDC= instance_create(x,y,obj_effect); IDC.type = 1; IDC.value = 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*with obj_tile{
    if abs(getc(other.x)-getc(x))+abs(getc(other.y)-getc(y)) &lt;= 1 &amp;&amp; side = other.side &amp;&amp; living = 1 hp += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if obj_control.selected = id
depth = -100;
else depth = -1;
if type = 1 depth--;
if hp &lt;= 0{
    ds_grid_set(obj_control.unitgrid,getc(x),getc(y),0);
    IDC= instance_create(x,y,obj_effect); IDC.type = 0;
    if type = 9 &amp;&amp; store != -1{
        with store instance_destroy();
    }
    if type = 1{
        show_message("Game over! The nexus has been destroyed!");
        game_restart();
    }
    if captureable = 1{
        side = 0;
        hp = 55;
    }
    else{
        ds_grid_set(obj_control.unitgrid,getc(x),getc(y),0);
        instance_destroy();
    }
}
if hp &gt; maxhp hp = maxhp;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if id = other.target{
    temp = hp;
    hp -= other.atk;
    if hp &lt;= 0 {hp = 0;}
    else{
        if instance_exists(other.from){
            if abs(getc(other.from.x)-getc(x))+abs(getc(other.from.y)-getc(y)) &lt;= attack_range(type) {
                if type != 3 || abs(getc(other.from.x)-getc(x))+abs(getc(other.from.y)-getc(y)) &gt; 1{
                    if type != 6 &amp;&amp; type != 11 &amp;&amp; type != 13 &amp;&amp; type != 17{
                        if !(melee = 1 &amp;&amp; other.from.flying = 1){
                        if other.counter = 0 {attack(id,other.from); IDI.counter = 1;}}
                    }
                }
            }
        }
    }
    ID = instance_create(x,y,obj_effect);
    ID.type = 2;
    ID.value = ceil(temp-hp);
    with other instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(obj_maptext){
with obj_shop instance_destroy();
if obj_control.turn != side {
    obj_control.selected = id;
    with obj_ground {
        state = -1;
        can_attack(other.id,obj_ground,10);
    }
}
if done &lt;= 1 &amp;&amp; obj_control.turn = side &amp;&amp; (obj_control.ai = 0 || obj_control.turn = 1){
action = 2;
obj_control.tempstate = 1;
with obj_ground{
    state = -1;
    obj_control.selected = other.id;
    can_attack(other.id,obj_ground,2);
    if other.type = 9 || other.type = 16{
        if abs(getc(other.x)-getc(x))+abs(getc(other.y)-getc(y)) = 1 &amp;&amp; type != 4 state = 3;
    }
    if other.type = 8{
        obj_control.shoppick = -1;
        if abs(getc(other.x)-getc(x))+abs(getc(other.y)-getc(y)) = 1 state = 0;
        for(i = 2; i&lt;8; i++){
            IDK = instance_create(576,228+(i-2)*32,obj_shop);
            IDK.type = i;
            IDK.alarm[0] = 1;
        }
        IDK = instance_create(576,228+6*32,obj_shop);
            IDK.type = 9;
            IDK.alarm[0] = 1;
    }
    if other.type = 14{
        obj_control.shoppick = -1;
        if abs(getc(other.x)-getc(x))+abs(getc(other.y)-getc(y)) = 1 &amp;&amp; (type = 1 || type = 4) state = 0;
        for(i = 2; i&lt;4; i++){
            IDK = instance_create(576,228+(i-2)*32,obj_shop);
            IDK.type = i+10;
            IDK.alarm[0] = 1;
        }
        IDK = instance_create(576,228+2*32,obj_shop);
            IDK.type = 15;
            IDK.alarm[0] = 1;
        IDK = instance_create(576,228+3*32,obj_shop);
            IDK.type = 16;
            IDK.alarm[0] = 1;
        IDK = instance_create(576,228+4*32,obj_shop);
            IDK.type = 17;
            IDK.alarm[0] = 1;
        
    }
    if other.type = 21{
        obj_control.shoppick = -1;
        if abs(getc(other.x)-getc(x))+abs(getc(other.y)-getc(y)) = 1 state = 0;
        for(i = 2; i&lt;5; i++){
            IDK = instance_create(576,228+(i-2)*32,obj_shop);
            IDK.type = i+16;
            IDK.alarm[0] = 1;
        }
    }
}
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(obj_maptext){

if obj_control.turn != side &amp;&amp; obj_control.tempstate = 0{
    obj_control.selected = id;
    with obj_ground {
        state = -1;
        recursive_move(other.x,other.y,get_spd(other.type)*6,9);
    }
}
if done = 0 &amp;&amp; obj_control.turn = side &amp;&amp; (obj_control.ai = 0 || obj_control.turn = 1){
action = 1;
with obj_ground{
state = -1;
recursive_move(other.x,other.y,get_spd(other.type)*6,1);
//basic_move(other.id);
}
}
obj_control.tempstate = 0;
obj_control.selected = other.id;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if side = 1 draw_sprite(spr_tile,type,x,y); 
if side = -1 draw_sprite(spr_tile2,type,x,y);
if side = 0 draw_sprite(spr_tilen,type,x,y);
if obj_control.hpnum = 1 &amp;&amp; side != 0{
draw_set_font(ft_dmg);
draw_set_halign(fa_right);
draw_set_valign(fa_bottom);
border_text(x+32,y+34,ceil(hp));
draw_set_halign(fa_left);
draw_set_valign(fa_top);
}
if store != -1 draw_sprite(spr_icon,(-side+1)/2,x,y);
if done = 1 draw_sprite(spr_indicator,3,x,y);
if done = 2 draw_sprite(spr_indicator,4,x,y);
if obj_control.selected = id{
    draw_sprite(spr_indicator,2,x,y);
    if side = 1 draw_rectangle_color(576,64,576+32*7,64+32,$999900,$004400,$004400,$999900,false);
    if side = -1 draw_rectangle_color(576,64,576+32*7,64+32,c_maroon,$004400,$004400,c_maroon,false);
    if side = 0 draw_rectangle_color(576,64,576+32*7,64+32,c_gray,$004400,$004400,c_gray,false);
    draw_sprite(spr_tilen,type,576,64);
    draw_set_halign(fa_left);
    if store != -1{
    border_text(608+8,64+4,"Loaded "+get_name(type));
    draw_sprite(spr_icon,3,576,64);
    }else
    border_text(608+8,64+4,get_name(type)); 
    draw_sprite(spr_indicator,5,576,96);
    border_text(608+8,96+4,string(hp)+" / "+string(maxhp));
    draw_sprite(spr_indicator,6,576,128);
    //if scalingatk = 1 border_text(608+8,128+4,string(atk*(hp/maxhp))+" / "+string(round(atk)));else 
    border_text(608+8,128+4,string(atk));
    draw_sprite(spr_indicator,7,704,96);
    border_text(736+8,96+4,string(get_spd(type)));
    draw_sprite(spr_indicator,8,704,128);
    if attack_minrange(type) = 0 border_text(736+8,128+4,string(attack_range(type))); else border_text(736+8,128+4,string(attack_minrange(type))+"~"+string(attack_range(type)));
    draw_set_color(c_black);
    draw_text_ext(576+8+1,160,get_effect(type),24,224);
    draw_text_ext(576+8,160+1,get_effect(type),24,224);
    draw_text_ext(576+8-1,160,get_effect(type),24,224);
    draw_text_ext(576+8,160-1,get_effect(type),24,224);
    draw_set_color(c_white);
    draw_text_ext(576+8,160,get_effect(type),24,224);
    if mouse_x &lt; 576+32 &amp;&amp; mouse_x &gt; 576 &amp;&amp; mouse_y &gt; 64 &amp;&amp; mouse_y &lt; 64+32{
        draw_set_alpha(0.7);
        draw_set_color(c_black);
        draw_rectangle(mouse_x-112-4,mouse_y+4,mouse_x-4,mouse_y+56+4,false);
        draw_set_alpha(1);
        draw_set_color(c_white);
        draw_rectangle(mouse_x-112-4,mouse_y+4,mouse_x-4,mouse_y+56+4,true);
        draw_set_halign(fa_center);
        if captureable != 1{
            if missiles = 1 draw_text(mouse_x-56-4,mouse_y+4+4,"Mechanized");
            else draw_text(mouse_x-56-4,mouse_y+4+4,"Basic");
            if water = 1 draw_text(mouse_x-56-4,mouse_y+28+4,"Naval Unit"); else draw_text(mouse_x-56-4,mouse_y+28+4,"Land Unit");
        }
        else{
            draw_text(mouse_x-56-4,mouse_y+4+4,"Structure");
            draw_text(mouse_x-56-4,mouse_y+28+4,"Unit");
        }
        
        draw_set_halign(fa_left);
    }
}
if sway &gt; 0    draw_sprite(spr_icon,abs(sway-1)*4,x,y);
if sway &lt; 0    draw_sprite(spr_icon,abs(sway-1)*4+1,x,y);

if type = 1 &amp;&amp; value = 0{
    if action = 1    border_text(x+32*2+4,y+32*2+4,"Select a tile to move to.");
    if action = 2    border_text(x+32+4,y+32+4,"Select a tile to attack.");
}

/* //DEBUG
draw_text(x,y,id);
draw_text(x,y,ds_grid_get(obj_control.unitgrid,getc(x),getc(y)));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
